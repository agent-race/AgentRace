{"query": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"", "answer": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0", "result": "The function `correct_bracketing` checks whether a given string of `<` and `>` symbols is properly bracketed, meaning every opening bracket `<` has a corresponding closing bracket `>`, and they are properly nested.\n\nHere\u2019s the implementation of the function:\n\n```python\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    balance = 0  # Keeps track of the number of unmatched opening brackets.\n    for bracket in brackets:\n        if bracket == \"<\":\n            balance += 1  # Increment for an opening bracket.\n        elif bracket == \">\":\n            balance -= 1  # Decrement for a closing bracket.\n        \n        if balance < 0:\n            # If balance goes negative, there are unmatched closing brackets.\n            return False\n    return balance == 0  # True if all opening brackets are matched.\n```\n\n### How the function works:\n1. The `balance` variable tracks the number of unmatched `<` brackets as we iterate over the string.\n2. When we encounter a `<`, we increase `balance` by 1.\n3. When we encounter a `>`, we decrease `balance` by 1.\n4. If `balance` becomes negative during the iteration, it indicates there are unmatched `>` brackets, so the function returns `False`.\n5. At the end of the iteration, if `balance` is `0`, then all brackets are matched, and the function returns `True`. If `balance` is not `0`, it means there are unmatched `<` brackets, and the function returns `False`.\n\n### Examples:\n- `correct_bracketing(\"<\")` \u2192 `False` (1 unmatched `<`)\n- `correct_bracketing(\"<>\")` \u2192 `True` (Balanced)\n- `correct_bracketing(\"<<><>>\")` \u2192 `True` (Properly nested and matched)\n- `correct_bracketing(\"><<>\")` \u2192 `False` (Unmatched `>`)", "tools": {}, "retrieve_time": [], "rerank_time": [], "communication_size": {}, "communication_pack": {}, "total_time": [10.505199909210205], "llm_time": {"gpt-4o-2024-08-06": [6.9424309730529785]}, "llm_tokens": {"gpt-4o-2024-08-06": {"prompt": [924], "completion": [478], "total": [1402]}}}