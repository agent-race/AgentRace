{"query": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"", "answer": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False", "result": "The `monotonic` function evaluates whether a given list of elements is either monotonically increasing or monotonically decreasing.\n\nHere is the Python implementation of the function:\n\n```python\ndef monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\"\"\"\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n# Examples of how it works:\nprint(monotonic([1, 2, 4, 20]))  # True (Increasing)\nprint(monotonic([1, 20, 4, 10])) # False (Neither increasing nor decreasing)\nprint(monotonic([4, 1, 0, -10])) # True (Decreasing)\n```\n\n### Explanation:\n1. The function checks if *all* adjacent elements in the list satisfy one of two conditions:\n    - Every element is less than or equal to the next (`l[i] <= l[i + 1]`) - this ensures a monotonically increasing order.\n    - Every element is greater than or equal to the next (`l[i] >= l[i + 1]`) - this ensures a monotonically decreasing order.\n2. If either condition holds across all adjacent pairs of the list, the function returns `True`. Otherwise, it returns `False`.", "tools": {}, "retrieve_time": [], "rerank_time": [], "communication_size": {}, "communication_pack": {}, "total_time": [7.670614957809448], "llm_time": {"gpt-4o-2024-08-06": [7.651454925537109]}, "llm_tokens": {"gpt-4o-2024-08-06": {"prompt": [749], "completion": [299], "total": [1048]}}}