{"query": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"", "answer": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False", "result": "To implement the `monotonic` function, you need to check if the given list is either monotonically increasing or monotonically decreasing. Here is a possible implementation:\n\n```python\ndef monotonic(l: list) -> bool:\n    if not l:\n        return True\n\n    increasing = all(x <= y for x, y in zip(l, l[1:]))\n    decreasing = all(x >= y for x, y in zip(l, l[1:]))\n    \n    return increasing or decreasing\n\n# Test cases\nprint(monotonic([1, 2, 4, 20]))  # Output: True\nprint(monotonic([1, 20, 4, 10]))  # Output: False\nprint(monotonic([4, 1, 0, -10]))  # Output: True\n```\n\nThis implementation checks two conditions: whether the list is monotonically increasing or whether it's monotonically decreasing. If either condition is true, the function returns `True`. Otherwise, it returns `False`.", "tools": {}, "retrieve_time": [], "rerank_time": [], "communication_size": {}, "communication_pack": {}, "total_time": [4.2851948738098145], "llm_time": {"gpt-4o-2024-08-06": [4.266073942184448]}, "llm_tokens": {"gpt-4o-2024-08-06": {"prompt": [749], "completion": [216], "total": [965]}}}