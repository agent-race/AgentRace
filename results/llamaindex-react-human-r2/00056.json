{"query": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"", "answer": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0", "result": "The `correct_bracketing` function checks whether every opening bracket (\"<\") in a given string has a corresponding closing bracket (\">\"). Here's the implementation:\n\n```python\ndef correct_bracketing(brackets: str):\n    open_count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            open_count += 1\n        elif bracket == '>':\n            open_count -= 1\n            if open_count < 0:\n                return False\n    return open_count == 0\n```\n\n### Explanation:\n1. `open_count` is used to track the number of unclosed opening brackets.\n2. Each time an opening bracket (\"<\") is encountered, `open_count` is incremented.\n3. Each time a closing bracket (\">\") is encountered, `open_count` is decremented.\n4. If `open_count` becomes negative at any point, it means there are more closing brackets than opening brackets at that point and the function returns `False`.\n5. At the end, if `open_count` is zero, it means all opening brackets have been properly closed and the function returns `True`. Otherwise, it returns `False`.\n\n### Test Cases:\n- `correct_bracketing(\"<\")` \u2192 `False`\n- `correct_bracketing(\"<>\")` \u2192 `True`\n- `correct_bracketing(\"<<><>>\")` \u2192 `True`\n- `correct_bracketing(\"><<>\")` \u2192 `False`\n\nFeel free to test this function with other inputs!", "tools": {"python_tool": [0.024692997]}, "retrieve_time": [], "rerank_time": [], "communication_size": {}, "communication_pack": {}, "total_time": [12.241338968276978], "llm_time": {"gpt-4o-2024-08-06": [6.80652117729187, 5.380378007888794]}, "llm_tokens": {"gpt-4o-2024-08-06": {"prompt": [1629, 1837], "completion": [181, 343], "total": [1810, 2180]}}}